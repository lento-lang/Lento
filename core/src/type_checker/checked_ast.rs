use crate::{
    interpreter::value::{Function, RecordKey, Value},
    lexer::token::LineInfo,
    type_checker::types::Type,
};

use super::types::{FunctionType, GetType, TypeJudgements, TypeTrait};

#[derive(Debug, Clone)]
pub struct CheckedOperator {
    pub name: String,
    pub symbol: String,
    pub handler: Function,
}

#[derive(Debug, Clone)]
pub struct CheckedParam {
    pub name: String,
    pub ty: Type,
}

impl CheckedParam {
    pub fn new(name: String, ty: Type) -> CheckedParam {
        CheckedParam { name, ty }
    }

    pub fn from_str<S: Into<String>>(name: S, ty: Type) -> CheckedParam {
        CheckedParam::new(name.into(), ty)
    }
}

#[derive(Debug, Clone)]
pub struct CheckedFunction {
    pub param: CheckedParam,
    pub body: CheckedAst,
    pub return_type: Type,
    pub ty: Type,
}

impl CheckedFunction {
    pub fn new(param: CheckedParam, body: CheckedAst, return_type: Type) -> CheckedFunction {
        let ty = FunctionType::new(param.clone(), return_type.clone());
        CheckedFunction {
            param,
            body,
            return_type,
            ty: Type::Function(Box::new(ty)),
        }
    }

    pub fn specialize(&mut self, judgements: &TypeJudgements, changed: &mut bool) {
        self.param.ty = self.param.ty.specialize(judgements, changed);
        self.return_type = self.return_type.specialize(judgements, changed);
        self.ty = self.ty.specialize(judgements, changed);
        self.body.specialize(judgements, changed);
    }

    pub fn pretty_print(&self) -> String {
        format!("{} -> {}", self.param.ty, self.return_type)
    }
}

impl GetType for CheckedFunction {
    fn get_type(&self) -> &Type {
        &self.ty
    }
}

/// The AST is a tree of nodes that represent the program.
/// All nodes are expressions, and the root node is the program itself.
/// The AST is generated by the parser, and then interpreted by the interpreter module or compiled.
#[derive(Debug, Clone)]
pub enum CheckedAst {
    /// A literal is a constant value that is directly represented in the source code.
    /// 1. Value of the literal
    Literal(Value, LineInfo),
    /// A tuple is a fixed-size collection of elements of possibly different types.
    /// 1. List of elements
    /// 2. Type of the tuple, made up of the types of the elements and the number of elements
    Tuple(Vec<CheckedAst>, Type, LineInfo),
    /// A dynamic list of elements.
    /// 1. List of elements
    /// 2. Type of every element in the list (all elements must **be a subtype**)
    List(Vec<CheckedAst>, Type, LineInfo),
    /// A record is a collection of key-value pairs
    /// 1. List of key-value pairs
    /// 2. Type of the record, made up of the types of the keys and values
    Record(Vec<(RecordKey, CheckedAst)>, Type, LineInfo),
    /// An identifier is a named reference to a value in the environment
    /// 1. Name of the identifier
    /// 2. Type of the identifier (the type of the value it refers to)
    Identifier(String, Type, LineInfo),
    /// A function variation call is an invocation of a function variation with a list of arguments
    Call {
        function: Box<CheckedAst>,
        arg: Box<CheckedAst>,
        return_type: Type,
        info: LineInfo,
    },
    /// A function declaration is a named function with a list of parameters and a body expression
    Function(Box<CheckedFunction>, LineInfo),
    /// An assignment expression assigns a value to a variable
    /// 1. Matching pattern (identifier, destructuring of a tuple, record, etc.)
    /// 2. Value
    /// 3. Type of the value
    Assignment(Box<CheckedAst>, Box<CheckedAst>, Type, LineInfo),
    /// Block expression evaluates all expressions in the block and returns the value of the last expression.
    /// 1. List of expressions
    /// 2. Type of the last expression
    Block(Vec<CheckedAst>, Type, LineInfo),
}

impl GetType for CheckedAst {
    fn get_type(&self) -> &Type {
        match self {
            CheckedAst::Literal(v, _) => v.get_type(),
            CheckedAst::Tuple(_, ty, _) => ty,
            CheckedAst::List(_, ty, _) => ty,
            CheckedAst::Record(_, ty, _) => ty,
            CheckedAst::Identifier(_, ty, _) => ty,
            CheckedAst::Call { return_type, .. } => return_type,
            CheckedAst::Function(func, _) => func.get_type(),
            CheckedAst::Assignment(_, _, ty, _) => ty,
            CheckedAst::Block(_, ty, _) => ty,
        }
    }
}

impl CheckedAst {
    pub fn info(&self) -> &LineInfo {
        match self {
            CheckedAst::Literal(_, info) => info,
            CheckedAst::Tuple(_, _, info) => info,
            CheckedAst::List(_, _, info) => info,
            CheckedAst::Record(_, _, info) => info,
            CheckedAst::Identifier(_, _, info) => info,
            CheckedAst::Call { info, .. } => info,
            CheckedAst::Function(_, info) => info,
            CheckedAst::Assignment(_, _, _, info) => info,
            CheckedAst::Block(_, _, info) => info,
        }
    }

    pub fn specialize(&mut self, judgements: &TypeJudgements, changed: &mut bool) {
        match self {
            CheckedAst::Literal(_, _) => (),
            CheckedAst::Tuple(elements, ty, _) => {
                for element in elements {
                    element.specialize(judgements, changed);
                }
                *ty = ty.specialize(judgements, changed);
            }
            CheckedAst::List(elements, ty, _) => {
                for element in elements {
                    element.specialize(judgements, changed);
                }
                *ty = ty.specialize(judgements, changed);
            }
            CheckedAst::Record(elements, ty, _) => {
                for (_, element) in elements {
                    element.specialize(judgements, changed);
                }
                *ty = ty.specialize(judgements, changed);
            }
            CheckedAst::Identifier(_, ty, _) => {
                *ty = ty.specialize(judgements, changed);
            }
            CheckedAst::Call {
                function,
                arg,
                return_type,
                ..
            } => {
                function.specialize(judgements, changed);
                arg.specialize(judgements, changed);
                *return_type = return_type.specialize(judgements, changed);
            }
            CheckedAst::Function(func, _) => {
                func.specialize(judgements, changed);
            }
            CheckedAst::Assignment(lhs, rhs, ty, _) => {
                lhs.specialize(judgements, changed);
                rhs.specialize(judgements, changed);
                *ty = ty.specialize(judgements, changed);
            }
            CheckedAst::Block(expressions, ty, _) => {
                for expression in expressions {
                    expression.specialize(judgements, changed);
                }
                *ty = ty.specialize(judgements, changed);
            }
        }
    }

    pub fn print_sexpr(&self) -> String {
        match self {
            CheckedAst::Literal(value, _) => value.pretty_print(),
            CheckedAst::Tuple(elements, _, _) => format!(
                "({})",
                elements
                    .iter()
                    .map(|e| e.print_sexpr())
                    .collect::<Vec<String>>()
                    .join(" ")
            ),
            CheckedAst::List(elements, _, _) => format!(
                "[{}]",
                elements
                    .iter()
                    .map(|e| e.print_sexpr())
                    .collect::<Vec<String>>()
                    .join(" ")
            ),
            CheckedAst::Record(_elements, _, _) => todo!(),
            CheckedAst::Identifier(name, _, _) => name.clone(),
            CheckedAst::Call { function, arg, .. } => {
                // format!("{}({})", function.print_sexpr(), arg.print_sexpr())

                // Unwrap any nested calls to print the full call chain as "f(x, y, z)"
                let mut function = function;
                let mut args = vec![arg];
                while let CheckedAst::Call {
                    function: f,
                    arg: a,
                    ..
                } = &**function
                {
                    function = f;
                    // All nested applications are performed before the current one
                    args.insert(0, a);
                }
                format!(
                    "{}({})",
                    function.print_sexpr(),
                    args.iter()
                        .map(|a| a.print_sexpr())
                        .collect::<Vec<String>>()
                        .join(", ")
                )
            }
            CheckedAst::Function(func, _) => {
                format!(
                    "({} {} -> {})",
                    func.param.ty,
                    func.param.name,
                    func.body.print_sexpr()
                )
            }
            CheckedAst::Assignment(lhs, rhs, _, _) => {
                format!("({} = {})", lhs.print_sexpr(), rhs.print_sexpr())
            }
            CheckedAst::Block(expressions, _, _) => format!(
                "{{{}}}",
                expressions
                    .iter()
                    .map(|e| e.print_sexpr())
                    .collect::<Vec<String>>()
                    .join(" ")
            ),
        }
    }

    pub fn pretty_print(&self) -> String {
        match self {
            Self::Literal(l, _) => l.pretty_print(),
            Self::Tuple(t, _, _) => {
                let mut result = "(".to_string();
                for (i, v) in t.iter().enumerate() {
                    result.push_str(&v.pretty_print());
                    if i < t.len() - 1 {
                        result.push_str(", ");
                    }
                }
                result.push(')');
                result
            }
            Self::List(l, _, _) => {
                let mut result = "[".to_string();
                for (i, v) in l.iter().enumerate() {
                    result.push_str(&v.pretty_print());
                    if i < l.len() - 1 {
                        result.push_str(", ");
                    }
                }
                result.push(']');
                result
            }
            Self::Record(r, _, _) => {
                let mut result = "{ ".to_string();
                for (i, (k, v)) in r.iter().enumerate() {
                    result.push_str(&format!("{}: {}", k, v.pretty_print()));
                    if i < r.len() - 1 {
                        result.push_str(", ");
                    }
                }
                result.push_str(" }");
                result
            }
            Self::Identifier(name, _, _) => name.clone(),
            Self::Call { function, arg, .. } => {
                format!("{}({})", function.pretty_print(), arg.pretty_print())
            }
            Self::Function(fun, _) => fun.pretty_print(),
            Self::Assignment(lhs, rhs, _, _) => {
                format!("{} = {}", lhs.pretty_print(), rhs.pretty_print())
            }
            Self::Block(expressions, _, _) => {
                let mut result = "{".to_string();
                for (i, e) in expressions.iter().enumerate() {
                    result.push_str(&format!("    {}", e.pretty_print()));
                    if i < expressions.len() - 1 {
                        result.push_str("; ");
                    }
                }
                result.push('}');
                result
            }
        }
    }
}

/// Module is the root program node of the AST
/// It contains a list of all the expressions in the program
#[derive(Debug, Clone)]
pub struct CheckedModule {
    pub name: String,
    pub expressions: Vec<CheckedAst>,
}

impl CheckedModule {
    pub fn new(name: String, expressions: Vec<CheckedAst>) -> CheckedModule {
        CheckedModule { name, expressions }
    }
}
